import os

# Read configuration
configfile: "config.yaml"

# Load GEO IDs from file
geo_ids = [line.strip() for line in open(config["geo_ids_file"], "r") if line.strip()]

# Define all targets for Snakemake
rule all:
    input:
        # Ensure all GEO IDs are processed
        expand(f"{config['output_dir']}/{{geo_id}}.done", geo_id=geo_ids),
        # Generate a summary report
        f"{config['log_dir']}/pipeline_summary.json"

# Rule: Download metadata
rule download_metadata:
    output:
        metadata_file=f"{config['output_dir']}/{{geo_id}}/metadata.xml"
    shell:
        """
        python -c '
        from pipeline.geo_pipeline.geo_metadata_downloader import GeoMetadataDownloader;
        downloader = GeoMetadataDownloader(output_dir="{config['output_dir']}");
        downloader.download_file("{wildcards.geo_id}");
        '
        """

# Rule: Extract and upload metadata
rule extract_metadata:
    input:
        metadata_file=f"{config['output_dir']}/{{geo_id}}/metadata.xml"
    output:
        f"{config['output_dir']}/{{geo_id}}.done"
    shell:
        """
        python -c '
        from pipeline.geo_pipeline.geo_metadata_etl import GeoMetadataETL;
        etl = GeoMetadataETL(
            file_path="{input.metadata_file}",
            template_path="{config['template']}",
            debug_mode=True
        );
        etl.parse_and_stream();
        '
        touch {output}
        """

# Rule: Validate metadata upload
rule validate_upload:
    input:
        metadata_done=f"{config['output_dir']}/{{geo_id}}.done"
    output:
        validated=f"{config['output_dir']}/{{geo_id}}.validated"
    shell:
        """
        python -c '
        from pipeline.geo_pipeline.geo_metadata_pipeline import GeoMetadataPipeline;
        pipeline = GeoMetadataPipeline(geo_ids=["{wildcards.geo_id}"]);
        pipeline.validate_metadata_upload("{wildcards.geo_id}");
        '
        touch {output}
        """

# Rule: Clean up files
rule cleanup_files:
    input:
        validated=f"{config['output_dir']}/{{geo_id}}.validated"
    output:
        f"{config['output_dir']}/{{geo_id}}.cleaned"
    shell:
        """
        python -c '
        from pipeline.geo_pipeline.geo_file_handler import GeoFileHandler;
        handler = GeoFileHandler(
            geo_ids_file="{config['geo_ids_file']}",
            output_dir="{config['output_dir']}",
            compress_files=True
        );
        handler.clean_files("{wildcards.geo_id}");
        '
        touch {output}
        """

# Rule: Summarize pipeline results
rule summarize_pipeline:
    input:
        expand(f"{config['output_dir']}/{{geo_id}}.cleaned", geo_id=geo_ids)
    output:
        summary=f"{config['log_dir']}/pipeline_summary.json"
    shell:
        """
        python -c '
        import json;
        summary = {{
            "total_geo_ids": len({geo_ids}),
            "successful": len([f for f in {geo_ids} if os.path.exists("{config['output_dir']}/" + f + ".cleaned")]),
        }};
        with open("{output.summary}", "w") as f:
            json.dump(summary, f, indent=4);
        '
        """
